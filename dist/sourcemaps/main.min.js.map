{"version":3,"sources":["main.js","make-visits.js"],"names":["tokenAPI","trueToken","async","getToken","email","password","response","fetch","method","headers","Content-Type","body","JSON","stringify","ok","text","Error","error","alert","message","showHide","enterBtn","document","querySelector","logoutBtn","createVisitBtn","filterPage","header","style","background","height","display","classList","add","remove","login","sessionStorage","getItem","fetchAndDisplayCards","addEventListener","modalForm","emailForm","passwordForm","e","preventDefault","value","form","token","submitForm","target","contains","removeItem","window","location","reload","Authorization","cards","json","innerHTML","forEach","cardData","displayCard","console","statusText","taskBoard","cardContainer","createElement","className","setAttribute","id","name","doctor","description","appendChild","getAllCards","deleteCard","cardId","confirmation","confirm","openEditModal","optionActive","option","editForm","status","priority","editFormContainer","getElementById","handleDoctorChange","selectedDoctor","additionalFieldsContainer","closeModal","saveChanges","newName","newDoctor","newDescription","updatedData","newAge","newPressure","newBMi","newDesease","age","pulse","massIndex","pastDiseases","newDate","lastVisit","showMore","detailsContainer","detailsContent","baseInfo","closeShowMore","filterCards","searchInput","toLowerCase","doctorFilter","statusFilter","priorityFilter","card","cardToRemove","nameElement","doctorElement","statusElement","priorityElement","nameMatch","includes","doctorMatch","statusMatch","priorityMatch","main","btnMakeForm","createModal","inputCreateName","purpose","comment","btnCloseForm","selectMenuDoctors","selectPriorityContainer","btnCreateVisit","formData","Module","[object Object]","event","data","CreateVisit","log","getInfo","sendInfo","localStorage","setItem","savedState","Visit","this","dontAddElements","changeHandler","removeEventListener","VisitDentist","super","VisitTherapist","VisitCardiologist","openModalWindow","module","visit","makeOptions","visitDentist","doctorNotes","visitTherapist","visitCardiologist","closeForm","statusVisit","btnDelete","responseData","deleteCards","LS","retrieveStoredCards","cardsData","parse","push","Object","assign","createCard","index","findIndex","splice"],"mappings":"AAAA,MAAMA,SAAW,iDACjB,IAAIC,UACJC,eAAeC,SAASC,EAAOC,GAC7B,IACE,MAAMC,QAAiBC,MAAMP,SAAU,CACrCQ,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBT,MAAOA,EACPC,SAAUA,MAId,GAAIC,EAASQ,GAAI,CAEf,aADoBR,EAASS,OAG7B,MAAM,IAAIC,MAAM,2BAElB,MAAOC,GACPC,MAAMD,EAAME,UAIhBjB,eAAekB,WACb,MAAMC,EAAWC,SAASC,cAAc,iBAClCC,EAAYF,SAASC,cAAc,kBACnCE,EAAiBH,SAASC,cAAc,wBACxCG,EAAaJ,SAASC,cAAc,oBACpCI,EAASL,SAASC,cAAc,WAEtCI,EAAOC,MAAMC,WAAa,OAC1BF,EAAOC,MAAME,OAAS,OACtBJ,EAAWE,MAAMG,QAAU,QAC3BV,EAASW,UAAUC,IAAI,UACvBT,EAAUQ,UAAUE,OAAO,UAC3BT,EAAeO,UAAUE,OAAO,UAGlChC,eAAeiC,QACb,MAAMd,EAAWC,SAASC,cAAc,iBAClCC,EAAYF,SAASC,cAAc,kBAEpCa,eAAeC,QAAQ,UAG1BjB,iBACMkB,wBAHNjB,EAASkB,iBAAiB,SAW5BrC,iBACE,MAAMsC,EAAYlB,SAASC,cAAc,wBACzCiB,EAAUZ,MAAMG,QAAU,QAE1B,MAAMU,EAAYD,EAAUjB,cAAc,uBACpCmB,EAAeF,EAAUjB,cAAc,0BAC7BiB,EAAUjB,cAAc,gBAEhCgB,iBAAiB,SAUzBrC,eAA4ByC,GAC1BA,EAAEC,iBACEH,EAAUI,OAASH,EAAaG,MASxC3C,eAA0B4C,EAAM1C,EAAOC,GACrC,MAAM0C,QAAc5C,SAASC,EAAOC,GACpC+B,eAAeW,MAAQA,EAEnBA,IACF3B,WACA0B,EAAKlB,MAAMG,QAAU,OACrB9B,UAAY8C,QACNT,wBAhBJU,CAAWR,EAAWC,EAAUI,MAAOH,EAAaG,OAEpD3B,MAAM,0BAbVsB,EAAUD,iBAAiB,QAAUI,KAC/BA,EAAEM,OAAOjB,UAAUkB,SAAS,UAAYP,EAAEM,OAAOjB,UAAUkB,SAAS,gBACtEV,EAAUZ,MAAMG,QAAU,OAC1BU,EAAUI,MAAQ,GAClBH,EAAaG,MAAQ,SAnB3BrB,EAAUe,iBAAiB,QAAS,KAClCH,eAAee,WAAW,SAC1BC,OAAOC,SAASC,WA+CpBpD,eAAeoC,uBACb,MAAMS,EAAQX,eAAeC,QAAQ,SAErC,GAAIU,EACF,IACE,MAAMzC,QAAiBC,MAAM,2CAA4C,CACvEE,QAAS,CACPC,eAAgB,mBAChB6C,cAAiB,UAAUR,KAI/B,GAAIzC,EAASQ,GAAI,CACf,MAAM0C,QAAclD,EAASmD,OAEXnC,SAASC,cAAc,cAC/BmC,UAAY,GAEtBF,EAAMG,QAAQzD,MAAO0D,UACbC,YAAYD,UAGpBE,QAAQ7C,MAAM,wBAAyBX,EAASyD,YAElD,MAAO9C,GACP6C,QAAQ7C,MAAM,wBAAyBA,IAO7Cf,eAAe2D,YAAYD,GACzB,MAAMI,EAAY1C,SAASC,cAAc,cACnC0C,EAAgB3C,SAAS4C,cAAc,OAE7CD,EAAcE,UAAY,OAC1BF,EAAcG,aAAa,UAAWR,EAASS,IAE/CJ,EAAcP,UAAY,6DAEFE,EAASU,uCACPV,EAASW,8CACJX,EAASY,yGAGRZ,EAASS,iEACJT,EAASS,yFAEMT,EAASS,6BAG7DL,EAAUS,YAAYR,GAGxB/D,eAAewE,cACb,MAAMpE,QAAiBC,MAAM,2CAA4C,CACvEE,QAAS,CACPC,eAAgB,mBAChB6C,cAAiB,UAAUR,gBAGXzC,EAASmD,QAEvBE,QAAQzD,MAAO0D,UACbC,YAAYD,KAMtB1D,eAAeyE,WAAWC,GACxB,MAAMC,EAAeC,QAAQ,qCACvB/B,EAAQX,eAAeC,QAAQ,SAErC,GAAIwC,EAAc,CAChB,MAAMvE,QAAiBC,MAAM,4CAA4CqE,EAAU,CACjFpE,OAAQ,SACRC,QAAS,CACPC,eAAgB,mBAChB6C,cAAiB,UAAUR,KAI/B,GAAIzC,EAASQ,GAAI,CACMQ,SAASC,cAAc,kBAAkBqD,OACjD1C,cAEb4B,QAAQ7C,MAAM,mBAAoBX,EAASyD,aAMjD7D,eAAe6E,cAAcH,GAC3B,MAAM7B,EAAQX,eAAeC,QAAQ,SAC/B/B,QAAiBC,MAAM,4CAA4CqE,EAAU,CACjFnE,QAAS,CACPC,eAAgB,mBAChB6C,cAAiB,UAAUR,KAGzBS,QAAclD,EAASmD,OAEvBuB,EAAe,CAACnC,EAAOoC,IAAWpC,IAAUoC,EAAS,WAAa,GAElEC,EAAW5D,SAAS4C,cAAc,OACxCgB,EAASf,UAAY,aACrBe,EAASxB,UAAY,2IAEkFF,EAAMc,2TAM5EU,EAAaxB,EAAMe,OAAQ,uEAC/BS,EAAaxB,EAAMe,OAAQ,+DACzBS,EAAaxB,EAAMe,OAAQ,0MAIkDf,EAAMgB,2WAQrFQ,EAAaxB,EAAM2B,OAAQ,8DACxBH,EAAaxB,EAAM2B,OAAQ,yUAOjCH,EAAaxB,EAAM4B,SAAU,qDAC1BJ,EAAaxB,EAAM4B,SAAU,2DAC7BJ,EAAaxB,EAAM4B,SAAU,2HAIzBR,wBAGjC,MAAMS,EAAoB/D,SAASgE,eAAe,qBAClDD,EAAkB3B,UAAY,GAC9B2B,EAAkBZ,YAAYS,GAEZ5D,SAASgE,eAAe,aAChC1D,MAAMG,QAAU,QAC1BwD,mBAAmB/B,GAGrB,SAAS+B,qBACP,MAAMC,EAAiBlE,SAASgE,eAAe,cAAczC,MACvD4C,EAA4BnE,SAASgE,eAAe,oBAE1DG,EAA0B/B,UAAY,GAEf,iBAAnB8B,EACFC,EAA0B/B,UAAY,64BAkBV,YAAnB8B,EACTC,EAA0B/B,UAAY,mQAMV,cAAnB8B,IACTC,EAA0B/B,UAAY,oNAS1C,SAASgC,aACWpE,SAASgE,eAAe,aAChC1D,MAAMG,QAAU,OACTT,SAASC,cAAc,eAC/BmC,UAAY,GAGvBxD,eAAeyF,YAAYf,GACzB,MAAM7B,EAAQX,eAAeC,QAAQ,SAC/B6C,EAAW5D,SAASC,cAAc,eAClC0C,EAAgB3C,SAASC,cAAc,mBAAmBqD,OAC1DgB,EAAUV,EAAS3D,cAAc,aAAasB,MAC9CgD,EAAYX,EAAS3D,cAAc,eAAesB,MAClDiD,EAAiBZ,EAAS3D,cAAc,oBAAoBsB,MAI5DkD,EAAc,CAClBzB,KAAMsB,EACNrB,OAAQsB,EACRrB,YAAasB,EACbX,OAPgBD,EAAS3D,cAAc,eAAesB,MAQtDuC,SAPkBF,EAAS3D,cAAc,iBAAiBsB,OAU5D,GAAkB,iBAAdgD,EAA8B,CAChC,MAAMG,EAASd,EAAS3D,cAAc,YAAYsB,MAC5CoD,EAAcf,EAAS3D,cAAc,iBAAiBsB,MACtDqD,EAAShB,EAAS3D,cAAc,YAAYsB,MAC5CsD,EAAajB,EAAS3D,cAAc,qBAAqBsB,MAC/DkD,EAAYK,IAAMJ,EAClBD,EAAYM,MAAQJ,EACpBF,EAAYO,UAAYJ,EACxBH,EAAYQ,aAAeJ,OACtB,GAAkB,YAAdN,EAAyB,CAClC,MAAMW,EAAUtB,EAAS3D,cAAc,sBAAsBsB,MAC7DkD,EAAYU,UAAYD,OACnB,GAAkB,cAAdX,EAA2B,CACpC,MAAMG,EAASd,EAAS3D,cAAc,YAAYsB,MAClDkD,EAAYK,IAAMJ,QAGGzF,MAAM,4CAA4CqE,EAAU,CACjFpE,OAAQ,MACRC,QAAS,CACPC,eAAgB,mBAChB6C,cAAiB,UAAUR,GAE7BpC,KAAMC,KAAKC,UAAUkF,KAGvB9B,EAAcP,UAAY,qDAENkC,gCACEC,qCACKC,mFAGClB,4DACKA,gFAEeA,8BAGhDc,aAGFxF,eAAewG,SAAS9B,GACtB,MAAM7B,EAAQX,eAAeC,QAAQ,SAC/B/B,QAAiBC,MAAM,4CAA4CqE,EAAU,CACjFnE,QAAS,CACPC,eAAgB,mBAChB6C,cAAiB,UAAUR,KAGzBa,QAAiBtD,EAASmD,OAE1BkD,EAAmBrF,SAASgE,eAAe,oBAC3CsB,EAAiBtF,SAAS4C,cAAc,OAE9C0C,EAAezC,UAAY,mBAC3B,MAAM0C,EAAW,yBACGjD,EAASU,2CACPV,EAASW,kDACJX,EAASY,oDACZZ,EAASwB,+CACXxB,EAASuB,yBAGP,iBAApBvB,EAASW,OACXqC,EAAelD,UAAY,SACzBmD,sCAC4BjD,EAASyC,uDACRzC,EAAS0C,yDACX1C,EAAS2C,iCAET,YAApB3C,EAASW,OAClBqC,EAAelD,UAAY,SACzBmD,iDACuCjD,EAAS6C,sBAErB,cAApB7C,EAASW,SAClBqC,EAAelD,UAAY,SACzBmD,yBACejD,EAASwC,yBAI5BO,EAAiBjD,UAAY,GAC7BiD,EAAiBlC,YAAYmC,GAERtF,SAASgE,eAAe,gBAChC1D,MAAMG,QAAU,QAG/B,SAAS+E,gBACcxF,SAASgE,eAAe,gBAChC1D,MAAMG,QAAU,OAG/B7B,eAAe6G,cACb,MAAMhE,EAAQX,eAAeC,QAAQ,SAC/B2E,EAAc1F,SAASgE,eAAe,eAAezC,MAAMoE,cAC3DC,EAAe5F,SAASgE,eAAe,gBAAgBzC,MACvDsE,EAAe7F,SAASgE,eAAe,gBAAgBzC,MACvDuE,EAAiB9F,SAASgE,eAAe,kBAAkBzC,MAE3DvC,QAAiBC,MAAM,2CAA4C,CACvEE,QAAS,CACPC,eAAgB,mBAChB6C,cAAiB,UAAUR,YAGXzC,EAASmD,QAEvBE,QAAQ0D,IACZ,MAAMC,EAAehG,SAASC,cAAc,kBAAkB8F,EAAKhD,QAC7DkD,EAAcF,EAAK/C,KACnBkD,EAAgBH,EAAK9C,OACrBkD,EAAgBJ,EAAKlC,OACrBuC,EAAkBL,EAAKjC,SAEvBd,EAAOiD,EAAcA,EAAYN,cAAgB,GACjD1C,EAASiD,GAAgC,GACzCrC,EAASsC,EAAgBA,EAAcR,cAAgB,GACvD7B,EAAWsC,EAAkBA,EAAgBT,cAAgB,GAE7DU,EAAYrD,EAAKsD,SAASZ,GAC1Ba,EAAgC,KAAjBX,GAAuB3C,IAAW2C,EACjDY,EAAgC,KAAjBX,GAAuBhC,IAAWgC,EACjDY,EAAoC,KAAnBX,GAAyBhC,IAAagC,EAG3DE,EAAa1F,MAAMG,QADjB4F,GAAaG,GAAeC,GAAiBF,EAClB,GAEA,SAnUnC1F;ACnIA,MAAM6F,KAAO1G,SAASC,cAAc,QAE9B0G,YAAc3G,SAASC,cAAc,2BACrCuB,KAAOxB,SAASC,cAAc,iBAE9B2G,YAAc5G,SAASgE,eAAe,eACtC6C,gBAAkB7G,SAASC,cAAc,sBACzC6G,QAAU9G,SAASC,cAAc,yBACjC6E,IAAM9E,SAASC,cAAc,qBAC7B8E,MAAQ/E,SAASC,cAAc,0BAC/B+E,UAAYhF,SAASC,cAAc,qBACnCiD,YAAclD,SAASC,cAAc,6BACrCgF,aAAejF,SAASC,cAAc,yBACtCkF,UAAYnF,SAASC,cAAc,2BACnC8G,QAAU/G,SAASC,cAAc,yBAEjC+G,aAAehH,SAASC,cAAc,4BACtCgH,kBAAoBjH,SAASC,cAAc,2BAC3CiH,wBAA0BlH,SAASC,cAAc,2BAEjDkH,eAAiBnH,SAASC,cAAc,8BAE9C,IAAImH,SAAW,GACf,MAAMC,OACFC,eAIAA,YACIN,aAAa/F,iBAAiB,QAAUsG,IACpCA,EAAMjG,iBACNE,KAAKlB,MAAMG,QAAU,OAErBmG,YAAYtG,MAAMG,QAAU,SAKpC6G,WAEIH,eAAelG,iBAAiB,QAASrC,MAAO2I,IAC5CA,EAAMjG,iBAmBN,MAAMkG,EAAO,IAAIC,YACjBjF,QAAQkF,IAAIF,GACZA,EAAKG,UACLnG,KAAKlB,MAAMG,QAAU,OACrBmG,YAAYtG,MAAMG,QAAU,OAE5B,UACUmH,SAASJ,GAIjB,MAAO7H,GACL6C,QAAQ7C,MAAM,sBAAuBA,MAIjD2H,WACIO,aAAaC,QAAQ,YAAatG,KAAKlB,MAAMG,SAIjD6G,UACI,MAAMS,EAAaF,aAAa9G,QAAQ,aACpCgH,IACAvG,KAAKlB,MAAMG,QAAUsH,IAQjC,MAAMC,MACFV,cAEIW,KAAKC,iBAAkB,EAI3BZ,cACI,GAAIL,oBAA8C,IAAzBgB,KAAKC,gBAA0B,CACpDD,KAAKC,iBAAkB,EAEvB,MAAMC,EAAgB,KAElBrB,QAAQxG,MAAMG,QAAU,QAExByC,YAAY5C,MAAMG,QAAU,QAG5BoG,gBAAgBvG,MAAMG,QAAU,QAEhCyG,wBAAwB5G,MAAMG,QAAU,OAGxC0G,eAAe7G,MAAMG,QAAU,QAE/BsG,QAAQzG,MAAMG,QAAU,QAExBwG,kBAAkBmB,oBAAoB,SAAUD,IAKpDlB,kBAAkBhG,iBAAiB,SAAUkH,KAMzD,MAAME,qBAAqBL,MACvBV,cACIgB,QAGJhB,cACQL,mBACAA,kBAAkBhG,iBAAiB,SAAU,KACT,YAA5BgG,kBAAkB1F,MAElB4D,UAAU7E,MAAMG,QAAU,QAK1B0E,UAAU7E,MAAMG,QAAU,UAO9C,MAAM8H,uBAAuBP,MACzBV,cACIgB,QAGJhB,cACQL,mBACAA,kBAAkBhG,iBAAiB,SAAU,KACT,aAA5BgG,kBAAkB1F,OAAoD,cAA5B0F,kBAAkB1F,MAE5DuD,IAAIxE,MAAMG,QAAU,QAGpBqE,IAAIxE,MAAMG,QAAU,UAMxC,MAAM+H,0BAA0BR,MAC5BV,cACIgB,QAGJhB,cACQL,mBACAA,kBAAkBhG,iBAAiB,SAAU,KACT,iBAA5BgG,kBAAkB1F,OAElBwD,MAAMzE,MAAMG,QAAU,QAEtBuE,UAAU1E,MAAMG,QAAU,QAE1BwE,aAAa3E,MAAMG,QAAU,UAI7BwE,aAAa3E,MAAMG,QAAU,OAE7BuE,UAAU1E,MAAMG,QAAU,OAE1BwE,aAAa3E,MAAMG,QAAU,WAQjD,SAASgI,kBACL7B,YAAYtG,MAAMG,QAAU,QAC5Be,KAAKlB,MAAMG,QAAU,OAGzB,MAAMiI,OAAS,IAAIrB,OAEbsB,MAAQ,IAAIX,MAClBW,MAAMC,cACN,MAAMC,aAAe,IAAIR,aACzBQ,aAAaC,cAEb,MAAMC,eAAiB,IAAIR,eAC3BQ,eAAeD,cACf,MAAME,kBAAoB,IAAIR,kBAC9BQ,kBAAkBF,cAClBJ,OAAOd,WACPc,OAAOO,YAIP,MAAMxB,YACFH,cACIW,KAAKhF,OACLgF,KAAKjF,KACLiF,KAAKnE,SACLmE,KAAKnB,QACLmB,KAAK9C,UACL8C,KAAKnD,IACLmD,KAAKlD,MACLkD,KAAKjD,UACLiD,KAAKhD,aACLgD,KAAKiB,YACLjB,KAAKlC,KACLkC,KAAKlF,GACLkF,KAAKkB,UACLlB,KAAKlB,QACLkB,KAAKpE,OAETyD,UACIW,KAAKhF,OAASzB,KAAKvB,cAAc,2BAA2BsB,MAC5D0G,KAAKjF,KAAOxB,KAAKvB,cAAc,uBAAuBsB,MACtD0G,KAAKnE,SAAWtC,KAAKvB,cAAc,2BAA2BsB,MAC9D0G,KAAKnB,QAAUtF,KAAKvB,cAAc,kBAAkBsB,MACpD0G,KAAK/E,YAAc1B,KAAKvB,cAAc,sBAAsBsB,MAC5D0G,KAAK9C,UAAY3D,KAAKvB,cAAc,qBAAqBsB,MACzD0G,KAAKnD,IAAMtD,KAAKvB,cAAc,cAAcsB,MAC5C0G,KAAKlD,MAAQvD,KAAKvB,cAAc,gBAAgBsB,MAChD0G,KAAKjD,UAAYxD,KAAKvB,cAAc,qBAAqBsB,MACzD0G,KAAKhD,aAAezD,KAAKvB,cAAc,wBAAwBsB,MAC/D0G,KAAKtI,MAAQ6B,KAAKvB,cAAc,kBAAkBsB,MAClD0G,KAAKpE,OAAS,UAMtBjF,eAAegJ,SAASJ,GACpB,MAAM/F,EAAQX,eAAeC,QAAQ,SAErC,IACI,MAAM/B,QAAiBC,MAAM,2CAA4C,CACrEC,OAAQ,OACRC,QAAS,CACLC,eAAgB,mBAChB6C,cAAiB,UAAUR,GAE/BpC,KAAMC,KAAKC,UAAUiI,KAGnB4B,QAAqBpK,EAASmD,OAIpC,OAHAK,QAAQkF,IAAI,iBAAkB0B,GAC9B5G,QAAQkF,IAAI0B,GACZ5B,EAAKzE,GAAKqG,EAAarG,GAChBqG,EAGX,MAAOzJ,GAEH,MADA6C,QAAQ7C,MAAM,sBAAuBA,GAC/B,IAAID,MAAMC,IAGxBf,eAAeyK,YAAYtG,GACvB,MAAMtB,EAAQX,eAAeC,QAAQ,SAErCyB,QAAQkF,IAAI3E,GACZ,UAC2B9D,MAAM,4CAA4C8D,EAAM,CAC3E7D,OAAQ,SACRC,QAAS,CACLC,eAAgB,mBAChB6C,cAAiB,UAAUR,KAIrC,MAAO9B,GAEL,MADA6C,QAAQ7C,MAAM,sBAAuBA,GAC/B,IAAID,MAAMC,IAIxB,MAAM2J,GACFhC,cACIW,KAAKsB,sBAGTjC,mBAAmBE,GACf,IAAIgC,EAAYlK,KAAKmK,MAAM5B,aAAa9G,QAAQ,iBAAmB,GACnEyI,EAAUE,KAAKlC,GACfK,aAAaC,QAAQ,cAAexI,KAAKC,UAAUiK,IAGvDlC,uBACsBhI,KAAKmK,MAAM5B,aAAa9G,QAAQ,iBAAmB,IAE3DsB,QAAQC,IACd,MAAMyD,EAAO,IAAI0B,YACjBkC,OAAOC,OAAO7D,EAAMzD,GACpByD,EAAKhD,GAAKT,EAASS,GACnBgD,EAAK8D,aACL9D,EAAK1C,eAGbiE,WAAWvE,GACPP,QAAQkF,IAAI3E,GACZ,IAAIyG,EAAYlK,KAAKmK,MAAM5B,aAAa9G,QAAQ,iBAAmB,GACnE,MAAM+I,EAAQN,EAAUO,UAAUzH,GAAYA,EAASS,KAAOA,IAC/C,IAAX+G,GACAN,EAAUQ,OAAOF,EAAO,GACxBjC,aAAaC,QAAQ,cAAexI,KAAKC,UAAUiK,KAEnDhH,QAAQkF,IAAI","file":"../js/main.min.js","sourcesContent":["const tokenAPI = 'https://ajax.test-danit.com/api/v2/cards/login';\r\nlet trueToken;\r\nasync function getToken(email, password) {\r\n  try {\r\n    const response = await fetch(tokenAPI, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        email: email,\r\n        password: password,\r\n      }),\r\n    });\r\n\r\n    if (response.ok) {\r\n      const token = await response.text();\r\n      return token;\r\n    } else {\r\n      throw new Error('User is not registered!');\r\n    }\r\n  } catch (error) {\r\n    alert(error.message);\r\n  }\r\n}\r\n\r\nasync function showHide() {\r\n  const enterBtn = document.querySelector('.login-button');\r\n  const logoutBtn = document.querySelector('.logout-button');\r\n  const createVisitBtn = document.querySelector('.create-visit-button');\r\n  const filterPage = document.querySelector(\".filter__section\");\r\n  const header = document.querySelector(\".header\");\r\n\r\n  header.style.background = \"none\";\r\n  header.style.height = \"auto\";\r\n  filterPage.style.display = \"block\";\r\n  enterBtn.classList.add('hidden');\r\n  logoutBtn.classList.remove('hidden');\r\n  createVisitBtn.classList.remove('hidden');\r\n}\r\n\r\nasync function login() {\r\n  const enterBtn = document.querySelector('.login-button');\r\n  const logoutBtn = document.querySelector('.logout-button');\r\n\r\n  if (!sessionStorage.getItem('token')) {\r\n    enterBtn.addEventListener('click', showModal);\r\n  } else {\r\n    showHide();\r\n    await fetchAndDisplayCards();\r\n  }\r\n\r\n  logoutBtn.addEventListener('click', () => {\r\n    sessionStorage.removeItem('token')\r\n    window.location.reload()\r\n  });\r\n\r\n  async function showModal() {\r\n    const modalForm = document.querySelector('#authorization-modal');\r\n    modalForm.style.display = 'block';\r\n\r\n    const emailForm = modalForm.querySelector('input[type=\"email\"]');\r\n    const passwordForm = modalForm.querySelector('input[type=\"password\"]');\r\n    const btnForm = modalForm.querySelector('.send-button');\r\n\r\n    btnForm.addEventListener('click', handleSubmit);\r\n\r\n    modalForm.addEventListener('click', (e) => {\r\n      if (e.target.classList.contains('modal') || e.target.classList.contains('btn-close')) {\r\n        modalForm.style.display = 'none';\r\n        emailForm.value = '';\r\n        passwordForm.value = '';\r\n      }\r\n    });\r\n\r\n    async function handleSubmit(e) {\r\n      e.preventDefault();\r\n      if (emailForm.value && passwordForm.value) {\r\n        submitForm(modalForm, emailForm.value, passwordForm.value);\r\n      } else {\r\n        alert('Fill in all fields!');\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  async function submitForm(form, email, password) {\r\n    const token = await getToken(email, password);\r\n    sessionStorage.token = token;\r\n\r\n    if (token) {\r\n      showHide();\r\n      form.style.display = 'none';\r\n      trueToken = token;\r\n      await fetchAndDisplayCards();\r\n    }\r\n\r\n    return token;\r\n  }\r\n}\r\n\r\nasync function fetchAndDisplayCards() {\r\n  const token = sessionStorage.getItem('token');\r\n\r\n  if (token) {\r\n    try {\r\n      const response = await fetch(\"https://ajax.test-danit.com/api/v2/cards\", {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        const cards = await response.json();\r\n\r\n        const taskBoard = document.querySelector(\"#taskBoard\");\r\n        taskBoard.innerHTML = \"\";\r\n\r\n        cards.forEach(async (cardData) => {\r\n          await displayCard(cardData);\r\n        });\r\n      } else {\r\n        console.error(\"Error fetching cards:\", response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching cards:\", error);\r\n    }\r\n  }\r\n}\r\n\r\nlogin();\r\n\r\nasync function displayCard(cardData) {\r\n  const taskBoard = document.querySelector(\"#taskBoard\");\r\n  const cardContainer = document.createElement(\"div\");\r\n\r\n  cardContainer.className = \"card\";\r\n  cardContainer.setAttribute(\"data-id\", cardData.id);\r\n\r\n  cardContainer.innerHTML = `\r\n      <div class=\"card__text\">\r\n      <h4>Name:</h4> <p>${cardData.name}</p>\r\n      <h4>Doctor:</h4> <p>${cardData.doctor}</p>\r\n      <h4>Description:</h4> <p>${cardData.description}</p>\r\n      </div>\r\n      <div class=\"button__contianer\">\r\n      <button onclick=\"showMore(${cardData.id})\">Show more</button>\r\n      <button onclick=\"openEditModal(${cardData.id})\">Edit</button>\r\n      </div>\r\n      <span class=\"delete-icon\" onclick=\"deleteCard(${cardData.id})\">&#10006;</span>\r\n    `;\r\n\r\n  taskBoard.appendChild(cardContainer);\r\n}\r\n\r\nasync function getAllCards() {\r\n  const response = await fetch(\"https://ajax.test-danit.com/api/v2/cards\", {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    }\r\n  });\r\n  const cards = await response.json();\r\n\r\n  cards.forEach(async (cardData) => {\r\n    await displayCard(cardData);\r\n  });\r\n}\r\n\r\n\r\n\r\nasync function deleteCard(cardId) {\r\n  const confirmation = confirm(\"Are you sure, you want to delete?\");\r\n  const token = sessionStorage.getItem('token');\r\n\r\n  if (confirmation) {\r\n    const response = await fetch(`https://ajax.test-danit.com/api/v2/cards/${cardId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n\r\n    if (response.ok) {\r\n      const cardToRemove = document.querySelector(`.card[data-id=\"${cardId}\"]`);\r\n      cardToRemove.remove();\r\n    } else {\r\n      console.error(\"Error to delete:\", response.statusText);\r\n    }\r\n  }\r\n}\r\n\r\n\r\nasync function openEditModal(cardId) {\r\n  const token = sessionStorage.getItem('token');\r\n  const response = await fetch(`https://ajax.test-danit.com/api/v2/cards/${cardId}`, {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    }\r\n  });\r\n  const cards = await response.json();\r\n\r\n  const optionActive = (value, option) => value === option ? \"selected\" : \"\";\r\n\r\n  const editForm = document.createElement(\"div\");\r\n  editForm.className = \"edit__form\";\r\n  editForm.innerHTML = `\r\n    <div class=\"input-group\">\r\n      <input required=\"\" type=\"text\" name=\"text\" autocomplete=\"off\" class=\"input\" id=\"editName\" value=\"${cards.name}\">\r\n      <label for=\"editName\" class=\"user-label\">Name</label>\r\n    </div>\r\n    <div class=\"select select__edit-container\">\r\n    <label for=\"editDoctor\" class=\"select__label\">Doctor</label>\r\n    <select id=\"editDoctor\" class=\"edit__select\" onchange=\"handleDoctorChange()\">\r\n    <option value=\"Cardiologist\" ${optionActive(cards.doctor, \"Cardiologist\")}>Cardiologist</option>\r\n    <option value=\"Dentist\"  ${optionActive(cards.doctor, \"Dentist\")}>Dentist</option>\r\n    <option value=\"Therapist\"  ${optionActive(cards.doctor, \"Therapist\")}>Therapist</option>\r\n    </select>\r\n    </div>\r\n    <div class=\"input-group\">\r\n    <input required=\"\" type=\"text\" name=\"text\" autocomplete=\"off\" class=\"input\" id=\"editDescription\" value=\"${cards.description}\">\r\n    <label for=\"editDescription\" class=\"user-label\">Description</label>\r\n  </div>\r\n    \r\n  <div class=\"select select__edit-container\">\r\n  <label for=\"editStatus\" class=\"select__label\">Status</label>\r\n    <select id=\"editStatus\" class=\"edit__select\">\r\n      <option value=\"\" disabled selected>Select status</option>\r\n      <option value=\"active\" ${optionActive(cards.status, \"active\")}>Active</option>\r\n      <option value=\"completed\" ${optionActive(cards.status, \"completed\")}>Completed</option>\r\n    </select>\r\n    </div>\r\n    <div class=\"select select__edit-container\">\r\n    <label for=\"editPriority\" class=\"select__label \">Priority</label>\r\n    <select id=\"editPriority\" class=\"edit__select\">\r\n      <option value=\"\" disabled selected>Select priority</option>\r\n      <option value=\"low\" ${optionActive(cards.priority, \"low\")}>Low</option>\r\n      <option value=\"medium\" ${optionActive(cards.priority, \"medium\")}>Medium</option>\r\n      <option value = \"high\" ${optionActive(cards.priority, \"high\")}> High</ >\r\n    </select > \r\n    </div>\r\n    <div id=\"additionalFields\"></div>\r\n    <button onclick=\"saveChanges(${cardId})\">Save</button>\r\n  `;\r\n\r\n  const editFormContainer = document.getElementById(\"editFormContainer\");\r\n  editFormContainer.innerHTML = \"\";\r\n  editFormContainer.appendChild(editForm);\r\n\r\n  const editModal = document.getElementById(\"editModal\");\r\n  editModal.style.display = \"block\";\r\n  handleDoctorChange(cards);\r\n}\r\n\r\nfunction handleDoctorChange() {\r\n  const selectedDoctor = document.getElementById(\"editDoctor\").value;\r\n  const additionalFieldsContainer = document.getElementById(\"additionalFields\");\r\n\r\n  additionalFieldsContainer.innerHTML = \"\";\r\n\r\n  if (selectedDoctor === 'Cardiologist') {\r\n    additionalFieldsContainer.innerHTML = `\r\n      <div class=\"input-group\">\r\n        <input required=\"\"  name=\"text\" autocomplete=\"off\" class=\"input\" type=\"number\" id=\"editAge\">\r\n        <label for=\"editAge\" class=\"user-label\">Age</label>\r\n      </div>\r\n      <div class=\"input-group\">\r\n        <input required=\"\"  name=\"text\" autocomplete=\"off\" class=\"input\" type=\"number\" id=\"editPressure\">\r\n        <label for=\"editPressure\" class=\"user-label\">Normal pressure</label>\r\n      </div>\r\n      <div class=\"input-group\">\r\n        <input required=\"\"  name=\"text\" autocomplete=\"off\" class=\"input\" type=\"number\" id=\"editBMI\">\r\n        <label for=\"editBMI\" class=\"user-label\">Body mass index</label>\r\n      </div>\r\n      <div class=\"input-group\">\r\n        <input required=\"\"  name=\"text\" autocomplete=\"off\" class=\"input\" type=\"text\" id=\"editHeartDisease\">\r\n        <label for=\"editHeartDisease\" class=\"user-label\">Past diseases</label>\r\n      </div>\r\n    `;\r\n  } else if (selectedDoctor === 'Dentist') {\r\n    additionalFieldsContainer.innerHTML = `\r\n    <div class=\"input-group\">\r\n    <label for=\"editLastVisitDate\" class=\"select__label\">Date of the last visit</label>\r\n      <input required=\"\" name=\"text\" autocomplete=\"off\" class=\"input edit__date\" type=\"date\" id=\"editLastVisitDate\">\r\n    </div>\r\n    `;\r\n  } else if (selectedDoctor === 'Therapist') {\r\n    additionalFieldsContainer.innerHTML = `\r\n    <div class=\"input-group\">\r\n      <input required=\"\"  name=\"text\" autocomplete=\"off\" class=\"input\" type=\"number\" id=\"editAge\">\r\n      <label for=\"editAge\" class=\"user-label\">Age</label>\r\n    </div>\r\n    `;\r\n  }\r\n}\r\n\r\nfunction closeModal() {\r\n  const editModal = document.getElementById(\"editModal\");\r\n  editModal.style.display = \"none\";\r\n  const editForm = document.querySelector(\".edit__form\");\r\n  editForm.innerHTML = \"\";\r\n}\r\n\r\nasync function saveChanges(cardId) {\r\n  const token = sessionStorage.getItem('token');\r\n  const editForm = document.querySelector(\".edit__form\")\r\n  const cardContainer = document.querySelector(`.card[data-id= \"${cardId}\"]`);\r\n  const newName = editForm.querySelector(\"#editName\").value;\r\n  const newDoctor = editForm.querySelector(\"#editDoctor\").value;\r\n  const newDescription = editForm.querySelector(\"#editDescription\").value;\r\n  const newStatus = editForm.querySelector(\"#editStatus\").value;\r\n  const newPriority = editForm.querySelector(\"#editPriority\").value;\r\n\r\n  const updatedData = {\r\n    name: newName,\r\n    doctor: newDoctor,\r\n    description: newDescription,\r\n    status: newStatus,\r\n    priority: newPriority\r\n  };\r\n\r\n  if (newDoctor === \"Cardiologist\") {\r\n    const newAge = editForm.querySelector(\"#editAge\").value;\r\n    const newPressure = editForm.querySelector(\"#editPressure\").value;\r\n    const newBMi = editForm.querySelector(\"#editBMI\").value;\r\n    const newDesease = editForm.querySelector(\"#editHeartDisease\").value;\r\n    updatedData.age = newAge;\r\n    updatedData.pulse = newPressure;\r\n    updatedData.massIndex = newBMi;\r\n    updatedData.pastDiseases = newDesease;\r\n  } else if (newDoctor === \"Dentist\") {\r\n    const newDate = editForm.querySelector(\"#editLastVisitDate\").value;\r\n    updatedData.lastVisit = newDate;\r\n  } else if (newDoctor === \"Therapist\") {\r\n    const newAge = editForm.querySelector(\"#editAge\").value;\r\n    updatedData.age = newAge;\r\n  }\r\n\r\n  const response = await fetch(`https://ajax.test-danit.com/api/v2/cards/${cardId}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    },\r\n    body: JSON.stringify(updatedData)\r\n  });\r\n\r\n  cardContainer.innerHTML = `\r\n  <div class=\"card__text\">\r\n  <h4>Name:</h4> <p>${newName}</p>\r\n  <h4>Doctor:</h4> <p>${newDoctor}</p>\r\n  <h4>Description:</h4> <p>${newDescription}</p>\r\n  </div>\r\n  <div class=\"button__contianer\">\r\n  <button onclick=\"showMore(${cardId})\">Show more</button>\r\n  <button onclick=\"openEditModal(${cardId})\">Edit</button>\r\n  </div>\r\n  <span class=\"delete-icon\" onclick=\"deleteCard(${cardId})\">&#10006;</span>\r\n      `;\r\n\r\n  closeModal();\r\n}\r\n\r\nasync function showMore(cardId) {\r\n  const token = sessionStorage.getItem('token');\r\n  const response = await fetch(`https://ajax.test-danit.com/api/v2/cards/${cardId}`, {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    }\r\n  });\r\n  const cardData = await response.json();\r\n\r\n  const detailsContainer = document.getElementById(\"detailsContainer\");\r\n  const detailsContent = document.createElement(\"div\");\r\n\r\n  detailsContent.className = \"details__content\";\r\n  const baseInfo = `\r\n    <h4>Name: <span>${cardData.name}</span></h4>\r\n    <h4>Doctor: <span>${cardData.doctor}</span></h4>\r\n    <h4>Description: <span>${cardData.description}</span></h4>\r\n    <h4>Priority: <span>${cardData.priority}</span></h4>\r\n    <h4>Status: <span>${cardData.status}</span></h4>\r\n  `;\r\n\r\n  if (cardData.doctor === 'Cardiologist') {\r\n    detailsContent.innerHTML = `\r\n    ${baseInfo}\r\n      <h4>Normalpressure: <span>${cardData.pulse}</span></h4>\r\n      <h4>Body mass index: <span>${cardData.massIndex}</span></h4>\r\n      <h4>Past diseases: <span>${cardData.pastDiseases}</span></h4>\r\n    `;\r\n  } else if (cardData.doctor === 'Dentist') {\r\n    detailsContent.innerHTML = `\r\n    ${baseInfo}\r\n      <h4>Date of the last visit:</h4> <p> ${cardData.lastVisit}</p>\r\n    `;\r\n  } else if (cardData.doctor === 'Therapist') {\r\n    detailsContent.innerHTML = `\r\n    ${baseInfo}\r\n    <h4>Age: <span>${cardData.age}</span></h4>\r\n    `;\r\n  }\r\n\r\n  detailsContainer.innerHTML = \"\";\r\n  detailsContainer.appendChild(detailsContent);\r\n\r\n  const detailsModal = document.getElementById(\"detailsModal\");\r\n  detailsModal.style.display = \"block\";\r\n}\r\n\r\nfunction closeShowMore() {\r\n  const detailsModal = document.getElementById(\"detailsModal\");\r\n  detailsModal.style.display = \"none\";\r\n}\r\n\r\nasync function filterCards() {\r\n  const token = sessionStorage.getItem('token');\r\n  const searchInput = document.getElementById(\"searchInput\").value.toLowerCase();\r\n  const doctorFilter = document.getElementById(\"doctorFilter\").value;\r\n  const statusFilter = document.getElementById(\"statusFilter\").value;\r\n  const priorityFilter = document.getElementById(\"priorityFilter\").value;\r\n\r\n  const response = await fetch(`https://ajax.test-danit.com/api/v2/cards`, {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    }\r\n  });\r\n  const cards = await response.json();\r\n\r\n  cards.forEach(card => {\r\n    const cardToRemove = document.querySelector(`.card[data-id=\"${card.id}\"]`);\r\n    const nameElement = card.name;\r\n    const doctorElement = card.doctor;\r\n    const statusElement = card.status;\r\n    const priorityElement = card.priority;\r\n\r\n    const name = nameElement ? nameElement.toLowerCase() : \"\";\r\n    const doctor = doctorElement ? doctorElement : \"\";\r\n    const status = statusElement ? statusElement.toLowerCase() : \"\";\r\n    const priority = priorityElement ? priorityElement.toLowerCase() : \"\";\r\n\r\n    const nameMatch = name.includes(searchInput);\r\n    const doctorMatch = (doctorFilter === '' || doctor === doctorFilter);\r\n    const statusMatch = (statusFilter === '' || status === statusFilter);\r\n    const priorityMatch = (priorityFilter === '' || priority === priorityFilter);\r\n\r\n    if (nameMatch && statusMatch && priorityMatch && doctorMatch) {\r\n      cardToRemove.style.display = \"\";\r\n    } else {\r\n      cardToRemove.style.display = \"none\";\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","const main = document.querySelector('main');\r\n\r\nconst btnMakeForm = document.querySelector('.header__btn-make-visit');\r\nconst form = document.querySelector('.header__form');\r\n\r\nconst createModal = document.getElementById(\"createModal\");\r\nconst inputCreateName = document.querySelector(\"#create__inputName\")\r\nconst purpose = document.querySelector('#create__inputPurpose')\r\nconst age = document.querySelector('#create__inputAge')\r\nconst pulse = document.querySelector('#create__inputPressure')\r\nconst massIndex = document.querySelector('#create__inputBMI')\r\nconst description = document.querySelector('#create__inputDescription')\r\nconst pastDiseases = document.querySelector('#create__inputDisease')\r\nconst lastVisit = document.querySelector('#create__inputLastVisit')\r\nconst comment = document.querySelector('#create__inputComment')\r\n\r\nconst btnCloseForm = document.querySelector('.form__button-close-form')\r\nconst selectMenuDoctors = document.querySelector('.form__selector-doctors')\r\nconst selectPriorityContainer = document.querySelector(\"#create__selectPriority\")\r\n// const selectUrgency = document.querySelector('.form__selector-urgency')\r\nconst btnCreateVisit = document.querySelector('.form__button-create-visit')\r\n\r\nlet formData = []\r\nclass Module {\r\n    constructor() {\r\n\r\n    }\r\n\r\n    closeForm() {\r\n        btnCloseForm.addEventListener('click', (event) => {\r\n            event.preventDefault()\r\n            form.style.display = 'none';\r\n            // modalForm.style.display = \"none\";\r\n            createModal.style.display = \"none\";\r\n\r\n        })\r\n\r\n    }\r\n    sendInfo() {\r\n\r\n        btnCreateVisit.addEventListener('click', async (event) => {\r\n            event.preventDefault();\r\n            // const fields = Array.from(document.querySelectorAll('.form input, .form select')).some((element) => {\r\n            //     if (window.getComputedStyle(element).display === 'none') {\r\n            //         return false;\r\n            //     }\r\n            //     if (element.value === '' && element.getAttribute('placeholder') !== 'Введіть коментарій') {\r\n            //         const textError = element.getAttribute('placeholder') || element.getAttribute('name');\r\n            //         // paragraphError.innerText = `*${textError}`;\r\n            //         // paragraphError.style.display = 'block';\r\n            //         return true;\r\n            //     }\r\n            //     return false;\r\n            // });\r\n\r\n            // if (fields) {\r\n\r\n            //     return;\r\n            // }\r\n            // paragraphError.style.display = 'none';\r\n            const data = new CreateVisit();\r\n            console.log(data);\r\n            data.getInfo();\r\n            form.style.display = 'none';\r\n            createModal.style.display = \"none\";\r\n            // btnMakeForm.style.display = 'block'\r\n            try {\r\n                await sendInfo(data);\r\n                // data.createCard();\r\n                // data.deleteCard();\r\n                // saveCards.saveToLocalStorage(data);\r\n            } catch (error) {\r\n                console.error('Error sending data:', error);\r\n            }\r\n        });\r\n    }\r\n    saveForm() {\r\n        localStorage.setItem('formState', form.style.display);\r\n    }\r\n\r\n\r\n    getForm() {\r\n        const savedState = localStorage.getItem('formState');\r\n        if (savedState) {\r\n            form.style.display = savedState;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass Visit {\r\n    constructor() {\r\n\r\n        this.dontAddElements = true\r\n\r\n    }\r\n\r\n    makeOptions() {\r\n        if (selectMenuDoctors && this.dontAddElements === true) {\r\n            this.dontAddElements = false\r\n\r\n            const changeHandler = () => {\r\n                // paragraphPurpose.style.display = 'block'\r\n                purpose.style.display = 'block'\r\n                // paragraphDescription.style.display = 'block'\r\n                description.style.display = 'block'\r\n                // paragraphUrgency.style.display = 'block'\r\n\r\n                inputCreateName.style.display = \"block\";\r\n\r\n                selectPriorityContainer.style.display = 'flex';\r\n                // paragraphName.style.display = 'block'\r\n                // fullName.style.display = 'block'\r\n                btnCreateVisit.style.display = 'block'\r\n                // paragraphComment.style.display = 'block'\r\n                comment.style.display = 'block'\r\n                // header.style.height = '1000px'\r\n                selectMenuDoctors.removeEventListener('change', changeHandler);\r\n\r\n\r\n            };\r\n\r\n            selectMenuDoctors.addEventListener('change', changeHandler)\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass VisitDentist extends Visit {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    doctorNotes() {\r\n        if (selectMenuDoctors) {\r\n            selectMenuDoctors.addEventListener('change', () => {\r\n                if (selectMenuDoctors.value === 'Dentist') {\r\n                    // paragraphLastVisit.style.display = 'block'\r\n                    lastVisit.style.display = 'block'\r\n\r\n\r\n                } else {\r\n                    // paragraphLastVisit.style.display = 'none'\r\n                    lastVisit.style.display = 'none'\r\n                }\r\n\r\n            })\r\n        }\r\n    }\r\n}\r\nclass VisitTherapist extends Visit {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    doctorNotes() {\r\n        if (selectMenuDoctors) {\r\n            selectMenuDoctors.addEventListener('change', () => {\r\n                if (selectMenuDoctors.value === 'Терапевт' || selectMenuDoctors.value === \"Therapist\") {\r\n                    // paragraphAge.style.display = 'block'\r\n                    age.style.display = 'block'\r\n                } else {\r\n                    // paragraphAge.style.display = 'none'\r\n                    age.style.display = 'none'\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\nclass VisitCardiologist extends Visit {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    doctorNotes() {\r\n        if (selectMenuDoctors) {\r\n            selectMenuDoctors.addEventListener('change', () => {\r\n                if (selectMenuDoctors.value === \"Cardiologist\") {\r\n                    // paragraphPastDiseases.style.display = 'block'\r\n                    pulse.style.display = 'block'\r\n                    // paragraphMassIndex.style.display = 'block'\r\n                    massIndex.style.display = 'block'\r\n                    // paragraphPastDiseases.style.display = 'block'\r\n                    pastDiseases.style.display = 'block'\r\n\r\n                } else {\r\n                    // paragraphPastDiseases.style.display = 'none'\r\n                    pastDiseases.style.display = 'none'\r\n                    // paragraphMassIndex.style.display = 'none'\r\n                    massIndex.style.display = 'none'\r\n                    // paragraphPastDiseases.style.display = 'none'\r\n                    pastDiseases.style.display = 'none'\r\n                }\r\n\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nfunction openModalWindow() {\r\n    createModal.style.display = \"block\";\r\n    form.style.display = `flex`\r\n}\r\n\r\nconst module = new Module()\r\n\r\nconst visit = new Visit()\r\nvisit.makeOptions()\r\nconst visitDentist = new VisitDentist()\r\nvisitDentist.doctorNotes()\r\n\r\nconst visitTherapist = new VisitTherapist()\r\nvisitTherapist.doctorNotes()\r\nconst visitCardiologist = new VisitCardiologist()\r\nvisitCardiologist.doctorNotes()\r\nmodule.sendInfo()\r\nmodule.closeForm()\r\n\r\n\r\n\r\nclass CreateVisit {\r\n    constructor() {\r\n        this.doctor\r\n        this.name\r\n        this.priority\r\n        this.purpose\r\n        this.lastVisit\r\n        this.age\r\n        this.pulse\r\n        this.massIndex\r\n        this.pastDiseases\r\n        this.statusVisit\r\n        this.card\r\n        this.id\r\n        this.btnDelete\r\n        this.comment\r\n        this.status\r\n    }\r\n    getInfo() {\r\n        this.doctor = form.querySelector('.form__selector-doctors').value\r\n        this.name = form.querySelector('.form__patient-name').value\r\n        this.priority = form.querySelector('.form__selector-urgency').value\r\n        this.purpose = form.querySelector('.form__purpose').value\r\n        this.description = form.querySelector('.form__description').value\r\n        this.lastVisit = form.querySelector('.form__last-visit').value\r\n        this.age = form.querySelector('.form__age').value\r\n        this.pulse = form.querySelector('.form__pulse').value\r\n        this.massIndex = form.querySelector('.form__mass-index').value\r\n        this.pastDiseases = form.querySelector('.form__past-diseases').value\r\n        this.error = form.querySelector('.form__comment').value\r\n        this.status = \"active\"\r\n    }\r\n}\r\n\r\n\r\n\r\nasync function sendInfo(data) {\r\n    const token = sessionStorage.getItem('token');\r\n\r\n    try {\r\n        const response = await fetch(\"https://ajax.test-danit.com/api/v2/cards\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n\r\n        const responseData = await response.json()\r\n        console.log('Response data:', responseData)\r\n        console.log(responseData)\r\n        data.id = responseData.id\r\n        return responseData\r\n\r\n    }\r\n    catch (error) {\r\n        console.error('Error sending data:', error)\r\n        throw new Error(error)\r\n    }\r\n}\r\nasync function deleteCards(id) {\r\n    const token = sessionStorage.getItem('token');\r\n\r\n    console.log(id);\r\n    try {\r\n        const response = await fetch(`https://ajax.test-danit.com/api/v2/cards/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`\r\n            },\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error('Error sending data:', error)\r\n        throw new Error(error)\r\n    }\r\n}\r\n\r\nclass LS {\r\n    constructor() {\r\n        this.retrieveStoredCards()\r\n    }\r\n\r\n    saveToLocalStorage(data) {\r\n        let cardsData = JSON.parse(localStorage.getItem('storedCards')) || []\r\n        cardsData.push(data)\r\n        localStorage.setItem('storedCards', JSON.stringify(cardsData))\r\n    }\r\n\r\n    retrieveStoredCards() {\r\n        const cardsData = JSON.parse(localStorage.getItem('storedCards')) || []\r\n\r\n        cardsData.forEach(cardData => {\r\n            const card = new CreateVisit()\r\n            Object.assign(card, cardData)\r\n            card.id = cardData.id;\r\n            card.createCard()\r\n            card.deleteCard()\r\n        });\r\n    }\r\n    deleteCard(id) {\r\n        console.log(id);\r\n        let cardsData = JSON.parse(localStorage.getItem('storedCards')) || []\r\n        const index = cardsData.findIndex(cardData => cardData.id === id)\r\n        if (index !== -1) {\r\n            cardsData.splice(index, 1)\r\n            localStorage.setItem('storedCards', JSON.stringify(cardsData))\r\n        } else {\r\n            console.log('карточка не знайдена')\r\n        }\r\n    }\r\n}\r\n\r\n// const saveCards = new LS()\r\n"]}